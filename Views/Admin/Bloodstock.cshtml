@model IEnumerable<BBMSDATA1.Models.BloodStock>
@{
    ViewData["Title"] = "Blood Stock Management";
    Layout = "_Layout1";
}

<div class="container-fluid py-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h4 class="mb-0"><i class="fas fa-tint me-2"></i>Blood Stock Inventory</h4>
            <div>
                <button type="button" class="btn btn-light btn-sm me-2" id="exportBtn">
                    <i class="fas fa-file-export me-1"></i>Export
                </button>
            
            </div>
        </div>

        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" id="searchInput" class="form-control" placeholder="Search inventory...">
                    </div>
                </div>
                <div class="col-md-2">
                    <select class="form-select" id="bloodBankFilter">
                        <option value="">All Blood Banks</option>
                        @foreach (var bank in ViewBag.BloodBanks)
                        {
                            <option value="@bank.BloodBankId">@bank.BloodBankName</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <select class="form-select" id="bloodGroupFilter">
                        <option value="">All Blood Groups</option>
                        @foreach (var group in ViewBag.BloodGroups)
                        {
                            <option value="@group.BloodGroupName">@group.BloodGroupName</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <select class="form-select" id="componentFilter">
                        <option value="">All Components</option>
                        @foreach (var component in ViewBag.ComponentTypes)
                        {
                            <option value="@component.ComponentTypeName">@component.ComponentTypeName</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="expiryFilter">
                        <option value="">Expiry Status</option>
                        @foreach (var status in ViewBag.ExpiryStatuses)
                        {
                            <option value="@status.Id">@status.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-hover table-bordered" id="bloodStockTable">
                    <thead class="table-light">
                        <tr>
                            <th>
                                <div class="d-flex justify-content-between align-items-center">
                                    @Html.DisplayNameFor(model => model.BloodBankId)
                                    <i class="fas fa-sort text-muted"></i>
                                </div>
                            </th>
                            <th>
                                <div class="d-flex justify-content-between align-items-center">
                                    Blood Group
                                    <i class="fas fa-sort text-muted"></i>
                                </div>
                            </th>
                            <th>
                                <div class="d-flex justify-content-between align-items-center">
                                    Component Type
                                    <i class="fas fa-sort text-muted"></i>
                                </div>
                            </th>
                            <th>
                                <div class="d-flex justify-content-between align-items-center">
                                    @Html.DisplayNameFor(model => model.Quantity)
                                    <i class="fas fa-sort text-muted"></i>
                                </div>
                            </th>
                            <th>
                                <div class="d-flex justify-content-between align-items-center">
                                    @Html.DisplayNameFor(model => model.LastUpdated)
                                    <i class="fas fa-sort text-muted"></i>
                                </div>
                            </th>
                            <th>
                                <div class="d-flex justify-content-between align-items-center">
                                    @Html.DisplayNameFor(model => model.ExpiryDate)
                                    <i class="fas fa-sort text-muted"></i>
                                </div>
                            </th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            var expiryClass = DateTime.Now > item.ExpiryDate ? "table-danger" :
                            (DateTime.Now.AddDays(7) > item.ExpiryDate ? "table-warning" : "");
                            <tr class="@expiryClass">
                                <td>
                                    @Html.DisplayFor(modelItem => item.BloodBankId)
                                </td>
                                <td>
                                    @{
                                        var bloodGroups = new Dictionary<int, string>
                                {
                                { 1, "A+" }, { 2, "A-" }, { 3, "B+" }, { 4, "B-" },
                                { 5, "AB+" }, { 6, "AB-" }, { 7, "O+" }, { 8, "O-" }
                                };
                                        var bloodGroupName = bloodGroups.ContainsKey(item.BloodGroupId) ? bloodGroups[item.BloodGroupId] : item.BloodGroupId.ToString();
                                    }
                                    <span class="badge bg-info">@bloodGroupName</span>
                                </td>
                                <td>
                                    @{
                                        var components = new Dictionary<int, string>
                                {
                                { 1, "Whole Blood" }, { 2, "Packed RBC" },
                                { 3, "Platelet" }, { 4, "Plasma" }
                                };
                                        var componentName = components.ContainsKey(item.ComponentTypeId) ? components[item.ComponentTypeId] : item.ComponentTypeId.ToString();
                                    }
                                    @componentName
                                </td>
                                <td>
                                    <span class="@(item.Quantity < 5 ? "text-danger fw-bold" : "")">
                                        @item.Quantity units
                                    </span>
                                </td>
                                <td>
                                    @item.LastUpdated.ToString("MMM dd, yyyy HH:mm")
                                    <small class="text-muted d-block">by @item.UpdatedBy</small>
                                </td>
                                <td>
                                    @{
                                        var daysToExpiry = (item.ExpiryDate - DateTime.Now).Days;
                                        var expiryBadgeClass = daysToExpiry < 0 ? "bg-danger" :
                                        daysToExpiry < 7 ? "bg-warning" : "bg-success";
                                        var expiryText = daysToExpiry < 0 ? "Expired" :
                                        daysToExpiry < 7 ? $"Expires in {daysToExpiry} days" :
                                        item.ExpiryDate.ToString("MMM dd, yyyy");
                                    }
                                    <span class="badge @expiryBadgeClass">@expiryText</span>
                                </td>
                                <td>
                                    @if (item.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group">
                                        <a asp-action="Edit" asp-route-id="@item.StockId" class="btn btn-sm btn-primary" data-bs-toggle="tooltip" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <a asp-action="Details" asp-route-id="@item.StockId" class="btn btn-sm btn-info" data-bs-toggle="tooltip" title="Details">
                                            <i class="fas fa-info-circle"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-danger delete-btn" data-id="@item.StockId" data-bs-toggle="tooltip" title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-between align-items-center mt-3">
                <div>
                    <span class="text-muted">Showing @Model.Count() entries</span>
                </div>
                <nav aria-label="Page navigation">
                    <ul class="pagination pagination-sm">
                        <li class="page-item disabled">
                            <a class="page-link" href="#" tabindex="-1">Previous</a>
                        </li>
                        <li class="page-item active"><a class="page-link" href="#">1</a></li>
                        <li class="page-item"><a class="page-link" href="#">2</a></li>
                        <li class="page-item"><a class="page-link" href="#">3</a></li>
                        <li class="page-item">
                            <a class="page-link" href="#">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <!-- Dashboard Cards -->
    <div class="row mt-4">
        <div class="col-xl-3 col-md-6">
            <div class="card bg-primary text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-0">Total Inventory</h5>
                            <h2 class="mb-0">@Model.Sum(x => x.Quantity)</h2>
                        </div>
                        <i class="fas fa-database fa-3x opacity-50"></i>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link" href="#">View Details</a>
                    <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-warning text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-0">Expiring Soon</h5>
                            <h2 class="mb-0">@Model.Count(x => x.ExpiryDate < DateTime.Now.AddDays(7) && x.ExpiryDate > DateTime.Now)</h2>
                        </div>
                        <i class="fas fa-exclamation-triangle fa-3x opacity-50"></i>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link" href="#">View Details</a>
                    <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-success text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-0">Critical Types</h5>
                            <h2 class="mb-0">@Model.Count(x => x.Quantity < 5 && x.IsActive)</h2>
                        </div>
                        <i class="fas fa-tint fa-3x opacity-50"></i>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link" href="#">View Details</a>
                    <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-danger text-white mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="mb-0">Expired</h5>
                            <h2 class="mb-0">@Model.Count(x => x.ExpiryDate < DateTime.Now)</h2>
                        </div>
                        <i class="fas fa-calendar-times fa-3x opacity-50"></i>
                    </div>
                </div>
                <div class="card-footer d-flex align-items-center justify-content-between">
                    <a class="small text-white stretched-link" href="#">View Details</a>
                    <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this blood stock entry? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <a href="#" id="confirmDeleteBtn" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
            $(document).ready(function () {
        $("#bloodBankFilter, #bloodGroupFilter, #componentFilter, #expiryFilter").on("change", function () {
               filterTable();
           });

           function filterTable() {
               var bloodBank = $("#bloodBankFilter").val();
               var bloodGroup = $("#bloodGroupFilter").val();
               var component = $("#componentFilter").val();
               var expiry = $("#expiryFilter").val();

               $("#bloodStockTable tbody tr").each(function () {
                   var row = $(this);
                   var bloodBankId = row.find("td:nth-child(1)").text().trim();
                   var bloodGroupCell = row.find("td:nth-child(2)").text().trim();
                   var componentCell = row.find("td:nth-child(3)").text().trim();

                   var bloodBankMatch = bloodBank === "" || bloodBankId === bloodBank;
                   var bloodGroupMatch = bloodGroup === "" || bloodGroupCell.includes(bloodGroup);
                   var componentMatch = component === "" || componentCell.includes(component);
                   var expiryMatch = expiry === "" || checkExpiry(row, expiry);

                   if (bloodBankMatch && bloodGroupMatch && componentMatch && expiryMatch) {
                       row.show();
                   } else {
                       row.hide();
                   }
               });

               // Update the "Showing X entries" text
               updateEntriesCount();
           }

           function updateEntriesCount() {
               var visibleRows = $("#bloodStockTable tbody tr:visible").length;
               $(".text-muted").text("Showing " + visibleRows);
           }

           function checkExpiry(row, filter) {
               var expiryText = row.find("td:nth-child(6)").text().trim();

               if (filter === "expiring") {
                   return expiryText.includes("Expires in");
               } else if (filter === "expired") {
                   return expiryText.includes("Expired");
               } else if (filter === "valid") {
                   return !expiryText.includes("Expired") && !expiryText.includes("Expires in");
               }
               return true;
           }

                   var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
           var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
               return new bootstrap.Tooltip(tooltipTriggerEl)
           });
            // Setup delete confirmation
         $('.delete-btn').click(function() {
             var id = $(this).data('id');
             $('#confirmDeleteBtn').attr('href', '@Url.Action("Delete")/' + id);
             $('#deleteModal').modal('show');
         });

         // Search functionality
         $("#searchInput").on("keyup", function() {
             var value = $(this).val().toLowerCase();
             $("#bloodStockTable tbody tr").filter(function() {
                 $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
             });
         });

         // Export functionality
                $("#exportBtn").click(function() {
            window.location.href = '@Url.Action("ExportBloodStock")';
        });

        });
    </script>
}




