@model BBMSDATA1.Models.Users

@{
	ViewData["Title"] = "Register";
}

<div class="container mt-4">
	<div class="row justify-content-center">
		<div class="col-md-10">
			<div class="card shadow-sm border-0 rounded-3">
				<div class="card-header bg-primary text-white py-3 rounded-top">
					<h2 class="card-title mb-0">Sign-Up</h2>
				</div>
				<div class="card-body p-4">
					<form asp-action="Register">
						<div asp-validation-summary="ModelOnly" class="text-danger"></div>

						<div class="row">
							<!-- Left Column -->
							<div class="col-md-6">
								<div class="form-group mb-3">
									<label asp-for="FullName" class="control-label fw-bold">Name:<span class="text-danger">*</span></label>
									<input asp-for="FullName" class="form-control" placeholder="Full Name" />
									<span asp-validation-for="FullName" class="text-danger"></span>
								</div>

								<div class="form-group mb-3">
									<label asp-for="PasswordHash" class="control-label fw-bold">Password:<span class="text-danger">*</span></label>
									<input asp-for="PasswordHash" class="form-control" type="password" required />
									<small class="form-text text-muted">Password must be at least 8 characters long and include uppercase, lowercase, number and special character</small>
									<span asp-validation-for="PasswordHash" class="text-danger"></span>
								</div>

								<div class="form-group mb-3">
									<label asp-for="PhoneNumber" class="control-label fw-bold">Mobile:<span class="text-danger">*</span></label>
									<input asp-for="PhoneNumber" class="form-control" placeholder="Mobile No." required pattern="[6-9]\d{9}" />
									<small class="form-text text-muted">Enter a 10-digit mobile number</small>
									<span asp-validation-for="PhoneNumber" class="text-danger"></span>
								</div>
								<div class="form-group mb-3">
									<label asp-for="R_ID" class="control-label fw-bold">Role:<span class="text-danger">*</span></label>
									<select asp-for="R_ID" class="form-control form-select" asp-items="ViewBag.Roles">
										<option value="">Select Role</option>
									</select>
									<span asp-validation-for="R_ID" class="text-danger"></span>
								</div>

								<div class="form-group mb-3">
									<label asp-for="Address" class="control-label fw-bold">Address:</label>
									<input asp-for="Address" class="form-control" />
									<span asp-validation-for="Address" class="text-danger"></span>
								</div>
							</div>

							<!-- Right Column -->
							<div class="col-md-6">
								<div class="form-group mb-3">
									<label class="control-label fw-bold">Age:<span class="text-danger">*</span></label>
									<input class="form-control" type="number" min="18" max="65" />
								</div>
								<div class="form-group mb-3">
									<label asp-for="BloodGroupId" class="control-label fw-bold">Blood Group:<span class="text-danger">*</span></label>
									<select asp-for="BloodGroupId" class="form-control form-select" asp-items="ViewBag.BloodGroups">
										<option value="">Select Blood Group</option>
									</select>
									<span asp-validation-for="BloodGroupId" class="text-danger"></span>
								</div>

								<div class="form-group mb-3">
    <label asp-for="Email" class="control-label fw-bold">Email:<span class="text-danger">*</span></label>
    <input asp-for="Email" class="form-control" placeholder="Email" required pattern="[a-z0-9._%+-]+[a-z0-9.-]+\.[a-z]{2,}$" />
    <span asp-validation-for="Email" class="text-danger"></span>
</div>

								<div class="form-group mb-3">
									<label asp-for="StateId" class="control-label fw-bold">State:<span class="text-danger">*</span></label>
									<select asp-for="StateId" class="form-control form-select" asp-items="ViewBag.States">
										<option value="">Select State</option>
									</select>
									<span asp-validation-for="StateId" class="text-danger"></span>
								</div>

								<div class="form-group mb-3">
									<label asp-for="PinCode" class="control-label fw-bold">PinCode:<span class="text-danger">*</span></label>
									<input asp-for="PinCode" class="form-control" placeholder="Pin Code" />
									<span asp-validation-for="PinCode" class="text-danger"></span>
								</div>
							</div>
						</div>

						<div class="row mt-3">
							<div class="col-md-12">
								<div class="form-group mb-3 text-center">
									<div class="d-lg-inline-block bg-light py-2 px-4 border rounded">
										<span class="text-dark fw-bold" style="letter-spacing:2px;font-style:italic;">Your Location</span>
										<input id="Latitude" name="Latitude" class="form-control d-inline-block mx-2" style="width: 150px;" placeholder="Latitude" readonly />
										<input id="Longitude" name="Longitude" class="form-control d-inline-block mx-2" style="width: 150px;" placeholder="Longitude" readonly />
										<button type="button" class="btn btn-secondary px-4" onclick="getLocation()">
											<i class="bi bi-geo-alt me-1"></i> Get Location
										</button>
									</div>
								</div>

								<div class="form-group text-center mt-4">
									<button type="submit" class="btn btn-primary px-5 py-2 rounded-pill">
										<i class="bi bi-person-plus me-1"></i> Register
									</button>
								</div>
							</div>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script>

		function getLocation() {
			if (navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(function (position) {
					document.getElementById("Latitude").value = position.coords.latitude;
					document.getElementById("Longitude").value = position.coords.longitude;
				});
			} else {
				alert("Geolocation is not supported by this browser.");
			}
		}
		  $.validator.addMethod("strongPassword", function (value, element) {
            return this.optional(element) || /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$!%*?&])[A-Za-z\d$!%*?&]{8,}$/.test(value);
        }, "Password must be at least 8 characters long and include uppercase, lowercase, number and special character");

        $.validator.addMethod("validPhone", function (value, element) {
            return this.optional(element) || /^[6-9]\d{9}$/.test(value);
        }, "Please enter a valid 10-digit mobile number starting with 6, 7, 8, or 9");

        // Add form validation
        $("form").validate({
            rules: {
                Email: {
                    required: true,
                    email: true
                },
                PasswordHash: {
                    required: true,
                    strongPassword: true
                },
                PhoneNumber: {
                    required: true,
                    validPhone: true
                }
            },
            messages: {
                Email: {
                    required: "Email is required",
                    email: "Please enter a valid email address"
                },
                PasswordHash: {
                    required: "Password is required"
                },
                PhoneNumber: {
                    required: "Mobile number is required"
                }
            },
            errorElement: "small",
            errorClass: "text-danger",
            highlight: function (element) {
                $(element).addClass("is-invalid");
            },
            unhighlight: function (element) {
                $(element).removeClass("is-invalid");
            },
            errorPlacement: function (error, element) {
                error.insertAfter(element);
            }
        });
    
	</script>
}